// Code generated by mockery v2.43.0. DO NOT EDIT.

package cmd

import (
	workspace "github.com/antham/wo/workspace"
	mock "github.com/stretchr/testify/mock"
)

// mockWorkspaceManager is an autogenerated mock type for the workspaceManager type
type mockWorkspaceManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *mockWorkspaceManager) Create(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEnv provides a mock function with given fields: _a0, _a1
func (_m *mockWorkspaceManager) CreateEnv(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnv")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: _a0
func (_m *mockWorkspaceManager) Edit(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditEnv provides a mock function with given fields: _a0, _a1
func (_m *mockWorkspaceManager) EditEnv(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EditEnv")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *mockWorkspaceManager) Get(_a0 string) (workspace.Workspace, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 workspace.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (workspace.Workspace, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) workspace.Workspace); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(workspace.Workspace)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *mockWorkspaceManager) List() ([]workspace.Workspace, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []workspace.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]workspace.Workspace, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []workspace.Workspace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]workspace.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields: _a0, _a1
func (_m *mockWorkspaceManager) Load(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *mockWorkspaceManager) Remove(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunFunction provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockWorkspaceManager) RunFunction(_a0 string, _a1 string, _a2 []string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for RunFunction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConfig provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockWorkspaceManager) SetConfig(_a0 string, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockWorkspaceManager creates a new instance of mockWorkspaceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWorkspaceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWorkspaceManager {
	mock := &mockWorkspaceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
