// Code generated by mockery v2.43.2. DO NOT EDIT.

package cmd

import (
	cobra "github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
)

// mockCompletionManager is an autogenerated mock type for the completionManager type
type mockCompletionManager struct {
	mock.Mock
}

// Process provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockCompletionManager) Process(_a0 *cobra.Command, _a1 []string, _a2 string) ([]string, cobra.ShellCompDirective) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 []string
	var r1 cobra.ShellCompDirective
	if rf, ok := ret.Get(0).(func(*cobra.Command, []string, string) ([]string, cobra.ShellCompDirective)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(*cobra.Command, []string, string) []string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*cobra.Command, []string, string) cobra.ShellCompDirective); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(cobra.ShellCompDirective)
	}

	return r0, r1
}

// newMockCompletionManager creates a new instance of mockCompletionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCompletionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCompletionManager {
	mock := &mockCompletionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
